"Prolog II+ Edinburgh predefined rules"

"session"

quit :- outml("bye!"), syscall(sysquit).
list :- syscall(syslist,0).
insert(F) :- syscall(sysinsert,F).

"i/o: ISO/SWI"

expand_file_name(F,L) :- syscall(sysexpandfilename,F,L).
open(File,Mode,Stream,Opt) :- syscall(sysopennew,File,Mode,Stream,Opt).
open(File,Mode,Stream) :- syscall(sysopennew,File,Mode,Stream,[]).
close(Stream) :- syscall(syscloseinput,Stream), !.
close(Stream) :- syscall(syscloseoutput,Stream).
get_char(Stream,Char) :- syscall(sysinchar,Stream,Char).
get_char(Char) :- syscall(sysinputis,Stream) syscall(sysinchar,Stream,Char).
put_char(Char) :- syscall(sysoutm,Char).
read(Stream,Term) :- syscall(sysinterm,Stream,Term).
read(Term) :- syscall(sysinputis,Stream) syscall(sysinterm,Stream,Term).
asserta(Term) :- syscall(sysasserta,Term).
assertz(Term) :- syscall(sysassertz,Term).

"i/o: PII+"

input_is(F) :- syscall(sysinputis,F).
input(F) :- syscall(sysopennew,F,read,S,[]).
close_input :- syscall(sysclosecurrentinput).
close_input(F) :- syscall(syscloseinput,F).
clear_input :- syscall(sysclearinput).

output_is(F) :- syscall(sysoutputis,F).
output(F) :- syscall(sysopennew,F,write,S,[]).
close_output :- syscall(sysclosecurrentoutput).
close_output(F) :- syscall(syscloseoutput,F).
flush :- syscall(sysflush).

"in: PII+"

in(T) :- input_is(S) syscall(sysinterm,S,T).
in_char(C) :- input_is(S) syscall(sysinchar,S,C).

"out: PII+"

out(T) :- syscall(sysout,T).
outm(S) :- syscall(sysoutm,S).
line :- syscall(sysline).
outl(T) :- out(T), line.
outml(S) :- outm(S), line.
page :- syscall(sysclrsrc).
clear :- page, fail.

"assign, eval, operators"

assign(I,T) :- syscall(sysassign,I,T).
val(T1,T2) :- syscall(syseval,T1,T2).
op(N,I1,S,I2) :- syscall(sysop,N,I1,S,I2).
op(N,I,S) :- syscall(sysop,N,I,S,S).

"debug"

bt :- syscall(sysbacktrace).
dump :- syscall(sysdump).

"helpers"

eq(X,X).
dif(X,Y) :- syscall(sysdif,X,Y).

[P|Q] :- P, Q.
nil.

not(X) :- X,!,fail.
not(X).

"Edinburgh-specific rules"

true.

once(X) :- X, !.

consult(F) :- insert(F).

listing :- list.


"operators"

:-
    op(700,xfx,is,is)
    op(700,xfx,=,'=')
    op(700,xfx,<,'<')
    op(700,xfx,>,'>')
    op(700,xfx,>=,'>=')
    op(700,xfx,=<,'=<')
    op(700,xfx,@<,'@<')
    op(700,xfx,@>,'@>')
    op(700,xfx,@>=,'@>=')
    op(700,xfx,@=<,'@=<')
    op(700,xfx,\=,'\=')
    op(700,xfx,=..,'=..')
    op(500,yfx,+,'+')
    op(500,yfx,-,'-')
    op(400,yfx,*,'*')
    op(400,yfx,/,'/')
    op(400,yfx,//,'//')
    op(200,fx,+,'+')
    op(200,fx,-,'-')
    op(200,xfy,^,'^').

"Controls, pII+ p.217"

'\='(X,X) :- !, fail.
'\='(X,Y).

"Composition and decomposition of objects, pII+ p.222"

'=..'(X,Y) :- syscall(sysuniv,X,Y).

"expressions used as term to erase, see pII+ p.221"

is(X,Y) :- val(Y,X).
'='(X,X).
'<'(X,Y) :- val('<'(X,Y),1).
'>'(X,Y) :- val('>'(X,Y),1).
'>='(X,Y) :- val('>='(X,Y),1).
'=<'(X,Y) :- val('=<'(X,Y),1).
'@>'(X,Y) :- val('@>'(X,Y),1).
'@<'(X,Y) :- val('@<'(X,Y),1).
'@>='(X,Y) :- val('@>='(X,Y),1).
'@=<'(X,Y) :- val('@=<'(X,Y),1).
