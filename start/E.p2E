"Prolog II+ Edinburgh predefined rules"

"session"

quit :- outml("bye!"), syscall(sysquit).
list :- syscall(syslist).
insert(F) :- syscall(sysinsert,F).

"i/o"

input_is(F) :- syscall(sysinputis,F).
input(F) :- syscall(sysinput,F).
close_input :- syscall(sysclosecurrentinput).
close_input(F) :- syscall(syscloseinput,F).
clear_input :- syscall(sysclearinput).

output_is(F) :- syscall(sysoutputis,F).
output(F) :- syscall(sysoutput,F).
close_output :- syscall(sysclosecurrentoutput).
close_output(F) :- syscall(syscloseoutput,F).
flush :- syscall(sysflush).

"in"

in(T) :- syscall(sysinterm,T).
in_char(C) :- syscall(sysinchar,C).

"out"

out(T) :- syscall(sysout,T).
outm(S) :- syscall(sysoutm,S).
line :- syscall(sysline).
outl(T) :- out(T), line.
outml(S) :- outm(S), line.
page :- syscall(sysclrsrc).
clear :- page, fail.

"assign, eval, operators"

assign(I,T) :- syscall(sysassign,I,T).
val(T1,T2) :- syscall(syseval,T1,T2).
op(N,I1,S,I2) :- syscall(sysop,N,I1,S,I2).
op(N,I,S) :- syscall(sysop,N,I,S,S).

"debug"

bt :- syscall(sysbacktrace).
dump :- syscall(sysdump).

"helpers"

eq(X,X).
dif(X,Y) :- syscall(sysdif,X,Y).

[P|Q] :- P, Q.
nil.

not(X) :- X,!,fail.
not(X).

"Edinburgh-specific rules"

true.

once(X) :- X, !.

is(X,Y) :- val(Y,X).

inf(X,Y) :- val(inf(X,Y),1).

consult(F) :- insert(F).

"operators"

:-
    op(700,xfx,"is",is)
    op(700,xfx,"<",inf)
    op(500,yfx,"+",add)
    op(500,yfx,"-",sub)
    op(400,yfx,"*",mul)
    op(400,yfx,"/",div)
    op(200,fx,"+",add)
    op(200,fx,"-",sub)
    op(200,xfy,"^",'^').

