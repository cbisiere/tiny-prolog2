"Prolog II+ Edinburgh and ISO predefined rules"

"operators"

:- syscall(sysop,1200,xfx,':-',':-').

op(N,I1,S,I2) :- syscall(sysop,N,I1,S,I2).
op(N,I,S) :- syscall(sysop,N,I,S,S).

:- op(1001,xfy,',',',').

:- op(900,fy,\+,not),
    op(700,xfx,is,is),
    op(700,xfx,=,'='),
    op(700,xfx,<,'<'),
    op(700,xfx,>,'>'),
    op(700,xfx,>=,'>='),
    op(700,xfx,=<,'=<'),
    op(700,xfx,@<,'@<'),
    op(700,xfx,@>,'@>'),
    op(700,xfx,@>=,'@>='),
    op(700,xfx,@=<,'@=<'),
    op(700,xfx,\=,'\='),
    op(700,xfx,=..,'=..'),
    op(700,xfx,=:=,eql),
    op(500,yfx,+,'+'),
    op(500,yfx,-,'-'),
    op(400,yfx,*,'*'),
    op(400,yfx,/,'/'),
    op(400,yfx,//,'//'),
    op(200,fx,+,'+'),
    op(200,fx,-,'-'),
    op(200,xfy,^,'^').

"session"

quit :- outml("bye!"), syscall(sysquit).

"rules (pII+ p.219)"

asserta(Rule) :- syscall(sysassert1,Rule,true).
assertz(Rule) :- syscall(sysassert1,Rule,false).
assert(Rule) :- assertz(Rule).
retract(Rule) :- syscall(sysretract1,Rule).

clause(T,Q) :- syscall(sysrule,T,Q).

list :- syscall(syslist,0).
insert(F) :- syscall(sysinsert,F).

"is"

free(T) :- syscall(sysfree,T,true).
var(T) :- free(T).
bound(T) :- syscall(sysfree,T,false).
nonvar(T) :- bound(T).

ident(T) :- syscall(sysis,T,ident).
atom(T) :- ident(T).

integer(T) :- syscall(sysis,T,integer).
real(T) :- syscall(sysis,T,real).
float(T) :- real(T).
number(T) :- integer(T).
number(T) :- real(T).

string(T) :- syscall(sysis,T,string).

dot(T) :- syscall(sysis,T,dot).
tuple(T) :- syscall(sysis,T,tuple).
compound(T) :- dot(T).
compound(T) :- tuple(T).

atomic(T) :- nonvar(T), not(compound(T)).

"i/o: ISO/SWI"

expand_file_name(F,L) :- syscall(sysexpandfilename,F,L).
open(File,Mode,Stream,Opt) :- syscall(sysopennew,File,Mode,Stream,Opt).
open(File,Mode,Stream) :- syscall(sysopennew,File,Mode,Stream,[]).
close(Stream) :- syscall(syscloseinput,Stream), !.
close(Stream) :- syscall(syscloseoutput,Stream).
get_char(Stream,Char) :- syscall(sysin,Stream,Char,char,false,false).
get_char(Char) :- input_is(Stream), get_char(Stream,Char).
put_char(Char) :- syscall(sysoutm,Char).
read(Stream,Term) :- syscall(sysinterm,Stream,Term).
read(Term) :- input_is(Stream), syscall(sysin,Stream,Term,term,true,false).
write(Term) :- syscall(sysoutm,Term).

"i/o: PII+"

input_is(F) :- syscall(sysinputis,F).
input(F) :- syscall(sysopennew,F,read,S,[]).
close_input :- syscall(sysclosecurrentinput).
close_input(F) :- syscall(syscloseinput,F).
clear_input :- syscall(sysclearinput).

output_is(F) :- syscall(sysoutputis,F).
output(F) :- syscall(sysopennew,F,write,S,[]).
close_output :- output_is(F), close_output(F).
close_output(F) :- syscall(syscloseoutput,F).
flush :- syscall(sysflush).

echo :- syscall(sysecho,true).
no_echo :- syscall(sysecho,false).
trace :- syscall(systrace,true).
no_trace :- syscall(systrace,false).

"in: PII+"

in(T) :- read(T).
in_char(C) :- get_char(C).

"out: PII+"

out(T) :- syscall(sysout,T).
outm(S) :- syscall(sysoutm,S).
line :- syscall(sysline).
outl(T) :- out(T), line.
outml(S) :- outm(S), line.
page :- syscall(sysclrsrc).
clear :- page, fail.

"string"

char_code(C,N) :- syscall(syscharcode,C,N).

"array"

def_array(I,N) :- syscall(sysdefarray,I,N).

"assign, eval"

assign(I,T) :- syscall(sysassign,I,T).
val(T1,T2) :- syscall(syseval,T1,T2).

"control"

freeze(V,G) :- syscall(sysfreeze,V,G).
fail :- syscall(sysfail).

"debug"

bt :- syscall(sysbacktrace).
dump :- syscall(sysdump).
debug :- syscall(sysdebug,true).
no_debug :- syscall(sysdebug,false).

"helpers"

eq(X,X).
dif(X,Y) :- syscall(sysdif,X,Y).

[P|Q] :- P, Q.
nil.

call(Goal) :- Goal.

"Edinburgh-specific rules"

true.

once(X) :- X, !.

consult(F) :- insert(F).

listing :- list.

nl :- line.

"Controls, pII+ p.217"

not(X) :- X, !, fail.
not(X).

'\='(X,X) :- !, fail.
'\='(X,Y).

"Composition and decomposition of objects, pII+ p.222"

'=..'(X,Y) :- syscall(sysuniv,X,Y).
atom_chars(A,L) :- syscall(sysatomchars,A,L).
atom_length(A,N) :- syscall(sysatomlength,A,N).
number_chars(A,L) :- syscall(sysnumberchars,A,L).

"expressions used as term to erase, see pII+ p.221"

is(X,Y) :- val(Y,X).
'='(X,X).
'<'(X,Y) :- val('<'(X,Y),1).
'>'(X,Y) :- val('>'(X,Y),1).
'>='(X,Y) :- val('>='(X,Y),1).
'=<'(X,Y) :- val('=<'(X,Y),1).
'@>'(X,Y) :- val('@>'(X,Y),1).
'@<'(X,Y) :- val('@<'(X,Y),1).
'@>='(X,Y) :- val('@>='(X,Y),1).
'@=<'(X,Y) :- val('@=<'(X,Y),1).
'=:='(X,Y) :- val(eql(X,Y),1).
