"Prolog II+ predefined operators and rules"

"rules"

rule(T,Q) -> syscall(sysrule,T,Q);
retract(H,Q) -> syscall(sysretract2,H,Q);

insert(F) -> syscall(sysinsert,F);
insert -> syscall(sysinputis,F) syscall(sysinsert,F);

list(N) -> syscall(syslist,N);
list -> list(0);
asserta(H,Q) -> syscall(sysassert2,H,Q,true);
assert(H,Q) -> asserta(H,Q);
assertz(H,Q) -> syscall(sysassert2,H,Q,false);
assert''(H,Q) -> assertz(H,Q);

"session"

quit -> outml("bye!") syscall(sysquit);

"is"

ident(T) -> syscall(sysis,T,ident);
integer(T) -> syscall(sysis,T,integer);
real(T) -> syscall(sysis,T,real);
string(T) -> syscall(sysis,T,string);
dot(T) -> syscall(sysis,T,dot);
tuple(T) -> syscall(sysis,T,tuple);

free(T) -> syscall(sysfree,T,true);
bound(T) -> syscall(sysfree,T,false);

"string"

char_code(C,N) -> syscall(syscharcode,C,N);

"array"

def_array(I,N) -> syscall(sysdefarray,I,N);

"i/o"

input_is(F) -> syscall(sysinputis,F);
input(F) -> syscall(sysselectinput,F) /;
input(F) -> syscall(sysopennew,F,read,S,nil);
close_input -> syscall(sysinputis,F) close_input(F);
close_input(F) -> syscall(syscloseinput,F);
clear_input -> syscall(sysclearinput);

output_is(F) -> syscall(sysoutputis,F);
output(F) -> syscall(sysselectoutput,F) /;
output(F) -> syscall(sysopennew,F,write,S,nil);
close_output -> syscall(sysoutputis,F) close_output(F);
close_output(F) -> syscall(syscloseoutput,F);
flush -> syscall(sysflush);

echo -> syscall(sysecho,true);
no_echo -> syscall(sysecho,false);

"in"

in_char(T) -> syscall(sysinputis,S) syscall(sysin,S,T,char,false,false);
in_char'(T) -> syscall(sysinputis,S) syscall(sysin,S,T,char,true,false);
next_char(T) -> syscall(sysinputis,S) syscall(sysin,S,T,char,false,true);
next_char'(T) -> syscall(sysinputis,S) syscall(sysin,S,T,char,true,true);
in(T) -> syscall(sysinputis,S) syscall(sysin,S,T,term,true,false);
in_integer(T) -> syscall(sysinputis,S) syscall(sysin,S,T,integer,true,false);
in_ident(T) -> syscall(sysinputis,S) syscall(sysin,S,T,ident,true,false);
in_string(T) -> syscall(sysinputis,S) syscall(sysin,S,T,string,true,false);
in_real(T) -> syscall(sysinputis,S) syscall(sysin,S,T,real,true,false);

"out"

out(T) -> syscall(sysout,T);
outm(S) -> syscall(sysoutm,S);
line -> syscall(sysline);
outl(T) -> out(T) line;
outml(S) -> outm(S) line;
page -> syscall(sysclrsrc);
clear -> page fail;

"assign, eval, operators"

assign(I,T) -> syscall(sysassign,I,T);
val(T1,T2) -> syscall(syseval,T1,T2);
op(N,I1,S,I2) -> syscall(sysop,N,I1,S,I2);
op(N,I,S) -> syscall(sysop,N,I,S,S);

"control"

freeze(V,G) -> syscall(sysfreeze,V,G);
fail -> syscall(sysfail);

"debug"

trace -> syscall(systrace,true);
no_trace -> syscall(systrace,false);
debug -> syscall(sysdebug,true);
no_debug -> syscall(sysdebug,false);

bt -> syscall(sysbacktrace);
dump -> syscall(sysdump);

"helpers"

eq(X,X) ->;
dif(X,Y) -> syscall(sysdif,X,Y);

nil ->;

not(X) -> X ! fail;
not(X) ->;

"operators"

->
    op(700,xfx,'<',inf)
    op(700,xfx,'=<',infe)
    op(700,xfx,'>',sup)
    op(700,xfx,'>=',supe)
    op(700,xfx,=:=,eql)
    op(500,yfx,+,add)
    op(500,yfx,-,sub)
    op(400,yfx,*,mul)
    op(400,yfx,/,div)
    op(200,fx,+,add)
    op(200,fx,-,sub)
    op(200,xfy,^,'^');
