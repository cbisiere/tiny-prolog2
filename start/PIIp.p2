"Prolog II+ predefined operators and rules"

"session"

quit -> outml("bye!") syscall(sysquit);
list -> syscall(syslist);
insert(F) -> syscall(sysinsert,F);

"i/o: PII+"

input_is(F) -> syscall(sysinputis,F);
input(F) -> syscall(sysopen,F,read,S,nil);
close_input -> syscall(sysclosecurrentinput);
close_input(F) -> syscall(syscloseinput,F);
clear_input -> syscall(sysclearinput);

output_is(F) -> syscall(sysoutputis,F);
output(F) -> syscall(sysopen,F,write,S,nil);
close_output -> syscall(sysclosecurrentoutput);
close_output(F) -> syscall(syscloseoutput,F);
flush -> syscall(sysflush);

"in"

in(T) -> input_is(S) syscall(sysinterm,S,T);
in_char(C) -> input_is(S) syscall(sysinchar,S,C);

"out"

out(T) -> syscall(sysout,T);
outm(S) -> syscall(sysoutm,S);
line -> syscall(sysline);
outl(T) -> out(T) line;
outml(S) -> outm(S) line;
page -> syscall(sysclrsrc);
clear -> page fail;

"assign, eval, operators"

assign(I,T) -> syscall(sysassign,I,T);
val(T1,T2) -> syscall(syseval,T1,T2);
op(N,I1,S,I2) -> syscall(sysop,N,I1,S,I2);
op(N,I,S) -> syscall(sysop,N,I,S,S);

"debug"

bt -> syscall(sysbacktrace);
dump -> syscall(sysdump);

"helpers"

eq(X,X) ->;
dif(X,Y) -> syscall(sysdif,X,Y);

nil ->;

not(X) -> X ! fail;
not(X) ->;

"operators"

->
    op(700,xfx,'<',inf)
    op(700,xfx,'=<',infe)
    op(700,xfx,'>',sup)
    op(700,xfx,'>=',supe)
    op(500,yfx,"+",add)
    op(500,yfx,"-",sub)
    op(400,yfx,"*",mul)
    op(400,yfx,"/",div)
    op(200,fx,"+",add)
    op(200,fx,"-",sub)
    op(200,xfy,"^",'^');

